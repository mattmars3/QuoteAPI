    // adds a field to the FileManager
    appendQuote(quoteObject) {
        console.log("Beginning of appendQuote method")
        if (this.fullQuoteMap == undefined) {this.fullQuoteMap = {}}         

        // hash the quote body        
        let hashQuoteBody = quoteObject.quoteBody;
        let hashedQuote = crypto.createHash('md5').update(hashQuoteBody).digest('hex').toString();

        // check if quote is already in list
        let inList = false;

        for (let key in quoteObject) {
            try {
                if (hashedQuote == this.fullQuoteList[key]) {
                    inList = true;
                }
            } catch {
                // code above will fail if it is not in the list
            }
        }

        // if the key is not already in the list
        if (inList != true) {
            // create a field for it in the list and set it equal to the stringified quote
            this.fullQuoteMap[hashedQuote] = JSON.stringify(quoteObject);
        }
    }
    
    /* 
    initializeQuoteLists() {
        // get the names of all the quoteLists
        const quoteListNames = this.getQuoteListNames();
        
        // create all the quoteLists and append them to the quoteLists field
        for (let quoteListName in quoteListNames) {
            let quoteli = this.createQuoteList(quoteListNames[quoteListName]);
            this.quoteLists.push(quoteli);
        }
    }

    createQuoteList(name, hashes=[]) {
        // create the quotelist object
        let ql = new QuoteList(name, hashes);
        this.quoteLists.push(ql)
        return ql;
    }
    
    // file that reads the quoteList directory and all the files in it
    getQuoteListNames() {
        let dirInfo = readdirSync("./quoteLists/");
        dirInfo.map(item => {item.substring(0, item.indexOf("."))})
        return dirInfo;
    }

    // writes all quoteLists to their respective save files
    writeQuoteLists() {
        for (let quote in this.quoteLists) {
            this.quoteLists[quote].writeToFile();
        }
        
    }
    
    save() {
        this.writeQuoteLists();        
        this.writeQuotes();
    }
    */

    readFromExternalFile(filePath) {
        // split file by newlines
        const quoteFile = readFileSync(filePath, 'ascii')
        const quotesList = quoteFile.split("\n")
        
        // list of quote objects created
        let quoteList = [];
    
        // for each line in the file, try and create a quote object out of it
        for (let lineNum in quotesList) {
            let currentQuote = quotesList[lineNum]

            // if first character isn't quote then just skip the line
            if (currentQuote[0] != '"') {
                continue;
            }
            let quoteConstructorArgList = []

            // search for final double quote
            let reverseDoubleIndex = currentQuote.split("").reverse().join().indexOf('"');

            // if the index = -1, then it doesn't exist and is not a well structured quote so it is omitted
            if (reverseDoubleIndex == -1) {continue}

            let secondDoubleQuoteIndex = currentQuote.length - currentQuote.split("").reverse().join().indexOf('"');
            console.log(secondDoubleQuoteIndex)


            // push the body of the quote
            const quoteBody = currentQuote.substring(1, secondDoubleQuoteIndex+1)
            quoteConstructorArgList.push(quoteBody)
            
            // get rid of body as it's not necessary anymore
            currentQuote = currentQuote.substring(secondDoubleQuoteIndex + 4);

            // get the writer
            const openParenIndex = currentQuote.indexOf("(");
            const writer = currentQuote.substring(0, openParenIndex-1);
            quoteConstructorArgList.push(writer);
            currentQuote = currentQuote.substring(openParenIndex+1)

            // get the quote source
            const endParenIndex = currentQuote.indexOf(")");
            const quoteSource = currentQuote.substring(0, endParenIndex);
            quoteConstructorArgList.push(quoteSource)

            // push the quote category
            const quoteCategory = currentQuote.substring(endParenIndex + 4).trim();
            quoteConstructorArgList.push(quoteCategory);
            
            // create a quote object with this information
            console.log(quoteConstructorArgList)
            quoteList.push(new Quote(quoteConstructorArgList[0], quoteConstructorArgList[1], quoteConstructorArgList[2], quoteConstructorArgList[3]))
        }